{"uuid":"6ca83b8c-734b-11ef-b286-97f9d47f4a8b","page":{"id":349972318,"data":{"appState":"[\"~#iR\",[\"^ \",\"n\",\"appTemplate\",\"v\",[\"^ \",\"appMaxWidth\",\"100%\",\"appStyles\",\"\",\"appTesting\",null,\"appThemeId\",null,\"appThemeModeId\",null,\"appThemeName\",null,\"createdAt\",null,\"customComponentCollections\",[],\"customDocumentTitle\",\"\",\"customDocumentTitleEnabled\",false,\"customShortcuts\",[],\"experimentalDataTabEnabled\",false,\"experimentalFeatures\",[\"^ \",\"disableMultiplayerEditing\",false,\"multiplayerEditingEnabled\",false,\"sourceControlTemplateDehydration\",false],\"folders\",[\"~#iL\",[]],\"formAppSettings\",[\"^ \",\"customRedirectUrl\",\"\"],\"inAppRetoolPillAppearance\",\"NO_OVERRIDE\",\"instrumentationEnabled\",false,\"internationalizationSettings\",[\"^ \",\"internationalizationEnabled\",false,\"internationalizationFiles\",[]],\"isFetching\",false,\"isFormApp\",false,\"isGlobalWidget\",false,\"isMobileApp\",false,\"loadingIndicatorsDisabled\",false,\"markdownLinkBehavior\",\"auto\",\"mobileAppSettings\",[\"^ \",\"displaySetting\",[\"^ \",\"landscapeMode\",false,\"tabletMode\",false],\"mobileOfflineModeBannerMode\",\"default\",\"mobileOfflineModeDelaySync\",false,\"mobileOfflineModeEnabled\",false],\"mobileOfflineAssets\",[],\"multiScreenMobileApp\",false,\"notificationsSettings\",[\"^ \",\"globalQueryShowFailureToast\",true,\"globalQueryShowSuccessToast\",false,\"globalQueryToastDuration\",4.5,\"globalToastPosition\",\"bottomRight\"],\"pageCodeFolders\",[\"^ \"],\"pageLoadValueOverrides\",[\"^B\",[]],\"plugins\",[\"~#iOM\",[\"$main\",[\"^0\",[\"^ \",\"n\",\"pluginTemplate\",\"v\",[\"^ \",\"id\",\"$main\",\"uuid\",null,\"type\",\"frame\",\"subtype\",\"Frame\",\"namespace\",null,\"resourceName\",null,\"resourceDisplayName\",null,\"template\",[\"^15\",[\"type\",\"main\",\"sticky\",null,\"padding\",\"8px 12px\",\"enableFullBleed\",false,\"isHiddenOnDesktop\",false,\"isHiddenOnMobile\",false,\"style\",[\"^15\",[\"canvas\",\"rgba(236, 229, 221, 0.4)\"]]]],\"style\",[\"^15\",[]],\"position2\",null,\"mobilePosition2\",null,\"mobileAppPosition\",null,\"tabIndex\",null,\"container\",\"\",\"^7\",\"~m1726395526872\",\"updatedAt\",\"~m1726636250287\",\"folder\",\"\",\"screen\",null]]],\"textInput1\",[\"^0\",[\"^ \",\"n\",\"pluginTemplate\",\"v\",[\"^ \",\"id\",\"textInput1\",\"^16\",\"e2dd41cd-7649-4c34-9d8c-cd9a379ca041\",\"^17\",\"widget\",\"^18\",\"TextInputWidget2\",\"^19\",null,\"^1:\",null,\"^1;\",null,\"^1<\",[\"^15\",[\"spellCheck\",false,\"readOnly\",false,\"iconAfter\",\"\",\"showCharacterCount\",false,\"autoComplete\",false,\"enforceMaxLength\",false,\"maxLength\",null,\"hidden\",false,\"customValidation\",\"\",\"patternType\",\"\",\"hideValidationMessage\",false,\"textBefore\",\"\",\"validationMessage\",\"\",\"margin\",\"4px 8px\",\"textAfter\",\"\",\"showInEditor\",false,\"showClear\",false,\"pattern\",\"\",\"tooltipText\",\"\",\"labelAlign\",\"left\",\"formDataKey\",\"{{ self.id }}\",\"value\",\"\",\"style\",[\"^15\",[]],\"labelCaption\",\"\",\"labelWidth\",\"33\",\"autoFill\",\"\",\"placeholder\",\"\",\"label\",\"Enter your massage here\",\"_validate\",false,\"labelWidthUnit\",\"%\",\"invalid\",false,\"iconBefore\",\"\",\"minLength\",null,\"inputTooltip\",\"\",\"events\",[\"^B\",[[\"^15\",[\"event\",\"submit\",\"type\",\"script\",\"method\",\"run\",\"pluginId\",\"\",\"targetId\",null,\"params\",[\"^15\",[\"src\",\"utils.setValue('inputValue', textInput1.value);\\nconst storedValue = utils.getValue('inputValue');\\n\"]],\"waitType\",\"debounce\",\"waitMs\",\"0\"]],[\"^15\",[\"event\",\"submit\",\"type\",\"datasource\",\"method\",\"trigger\",\"pluginId\",\"query1\",\"targetId\",null,\"params\",[\"^15\",[]],\"waitType\",\"debounce\",\"waitMs\",\"0\"]]]],\"autoCapitalize\",\"none\",\"loading\",false,\"disabled\",false,\"labelPosition\",\"top\",\"labelWrap\",false,\"maintainSpaceWhenHidden\",false,\"required\",false]],\"^1=\",[\"^15\",[]],\"^1>\",[\"^0\",[\"^ \",\"n\",\"position2\",\"v\",[\"^ \",\"^17\",\"grid\",\"^1B\",\"\",\"rowGroup\",\"body\",\"subcontainer\",\"\",\"row\",23.599999999999998,\"col\",2,\"height\",0.2,\"width\",5,\"tabNum\",0,\"stackPosition\",null]]],\"^1?\",null,\"^1@\",null,\"^1A\",null,\"^1B\",\"\",\"^7\",\"~m1726395544721\",\"^1C\",\"~m1726647204212\",\"^1D\",\"\",\"^1E\",null]]],\"query1\",[\"^0\",[\"^ \",\"n\",\"pluginTemplate\",\"v\",[\"^ \",\"id\",\"query1\",\"^16\",null,\"^17\",\"datasource\",\"^18\",\"SqlQueryUnified\",\"^19\",null,\"^1:\",\"763b16ef-4d31-4d37-a0fe-40644800f657\",\"^1;\",\"retool_db\",\"^1<\",[\"^15\",[\"queryRefreshTime\",\"\",\"allowedGroupIds\",[\"^B\",[]],\"streamResponse\",false,\"records\",\"\",\"lastReceivedFromResourceAt\",null,\"databasePasswordOverride\",\"\",\"queryDisabledMessage\",\"\",\"servedFromCache\",false,\"offlineUserQueryInputs\",\"\",\"successMessage\",\"\",\"queryDisabled\",\"\",\"playgroundQuerySaveId\",\"latest\",\"workflowParams\",null,\"resourceNameOverride\",\"\",\"runWhenModelUpdates\",false,\"showFailureToaster\",true,\"query\",\"\",\"playgroundQueryUuid\",\"\",\"playgroundQueryId\",null,\"error\",null,\"workflowRunBodyType\",\"raw\",\"privateParams\",[\"^B\",[]],\"queryRunOnSelectorUpdate\",false,\"runWhenPageLoadsDelay\",\"\",\"warningCodes\",[\"^B\",[]],\"data\",null,\"recordId\",\"\",\"importedQueryInputs\",[\"^15\",[]],\"_additionalScope\",[\"^B\",[]],\"isImported\",false,\"showSuccessToaster\",true,\"dataArray\",[\"^B\",[]],\"cacheKeyTtl\",\"\",\"filterBy\",\"\",\"requestSentTimestamp\",null,\"databaseHostOverride\",\"\",\"metadata\",null,\"editorMode\",\"sql\",\"queryRunTime\",null,\"actionType\",\"\",\"changesetObject\",\"\",\"shouldUseLegacySql\",false,\"offlineOptimisticResponse\",null,\"errorTransformer\",\"return data.error\",\"finished\",null,\"databaseNameOverride\",\"\",\"confirmationMessage\",null,\"isFetching\",false,\"changeset\",\"\",\"rawData\",null,\"queryTriggerDelay\",\"0\",\"resourceTypeOverride\",\"\",\"watchedParams\",[\"^B\",[]],\"enableErrorTransformer\",false,\"databaseWarehouseOverride\",\"\",\"enableBulkUpdates\",false,\"showLatestVersionUpdatedWarning\",false,\"timestamp\",0,\"importedQueryDefaults\",[\"^15\",[]],\"enableTransformer\",true,\"showUpdateSetValueDynamicallyToggle\",true,\"overrideOrgCacheForUserCache\",false,\"bulkUpdatePrimaryKey\",\"\",\"runWhenPageLoads\",false,\"transformer\",\"return data\",\"events\",[\"^B\",[[\"^15\",[\"event\",\"success\",\"type\",\"widget\",\"method\",\"scrollIntoView\",\"pluginId\",\"button1\",\"targetId\",null,\"params\",[\"^15\",[\"options\",[\"^15\",[\"block\",\"nearest\",\"behavior\",\"auto\"]]]],\"waitType\",\"debounce\",\"waitMs\",\"0\"]]]],\"isMultiplayerEdited\",false,\"tableName\",\"\",\"queryTimeout\",\"10000\",\"workflowId\",null,\"requireConfirmation\",false,\"queryFailureConditions\",\"\",\"changesetIsObject\",false,\"enableCaching\",false,\"allowedGroups\",[\"^B\",[]],\"databaseUsernameOverride\",\"\",\"databaseRoleOverride\",\"\",\"shouldEnableBatchQuerying\",false,\"doNotThrowOnNoOp\",false,\"offlineQueryType\",\"None\",\"queryThrottleTime\",\"750\",\"updateSetValueDynamically\",false,\"notificationDuration\",\"\"]],\"^1=\",null,\"^1>\",null,\"^1?\",null,\"^1@\",null,\"^1A\",null,\"^1B\",\"\",\"^7\",\"~m1726395662824\",\"^1C\",\"~m1726474170188\",\"^1D\",\"\",\"^1E\",null]]],\"button1\",[\"^0\",[\"^ \",\"n\",\"pluginTemplate\",\"v\",[\"^ \",\"id\",\"button1\",\"^16\",\"a1195c58-56c7-4749-8170-568e9e6dc8f8\",\"^17\",\"widget\",\"^18\",\"ButtonWidget2\",\"^19\",null,\"^1:\",null,\"^1;\",null,\"^1<\",[\"^15\",[\"heightType\",\"fixed\",\"horizontalAlign\",\"stretch\",\"clickable\",false,\"iconAfter\",\"\",\"submitTargetId\",null,\"hidden\",false,\"ariaLabel\",\"\",\"text\",\"Send\",\"margin\",\"4px 8px\",\"showInEditor\",false,\"tooltipText\",\"\",\"styleVariant\",\"solid\",\"submit\",false,\"iconBefore\",\"\",\"events\",[\"^B\",[[\"^15\",[\"event\",\"click\",\"type\",\"script\",\"method\",\"run\",\"pluginId\",\"\",\"targetId\",null,\"params\",[\"^15\",[\"src\",\"// Step 1: Capture the input value from the textbox (the message)\\nconst inputValue = textInput1.value;\\n\\n// Step 2: Set the messenger, which could be 'bot' or 'user'\\nconst messenger = \\\"user\\\";  // Adjust this as needed, depending on who is sending\\n\\n// Step 3: Get the current date and time\\nconst currentDate = new Date();\\nconst messageDate = currentDate.toISOString().split('T')[0];  // Format date as YYYY-MM-DD\\nconst messageTime = currentDate.toTimeString().split(' ')[0]; // Format time as HH:MM:SS\\n\\n// Function to generate a chatId based on the day and the first message\\nfunction generateChatId(firstMessage) {\\n  if (!firstMessage || typeof firstMessage !== \\\"string\\\") {\\n    return \\\"InvalidMessage\\\";  // Fallback chatId if something goes wrong\\n  }\\n\\n  const currentDate = new Date();\\n  const formattedDate = currentDate.toISOString().split('T')[0].replace(/-/g, ''); // 'YYYYMMDD'\\n  const messageSnippet = firstMessage.replace(/\\\\s+/g, '').substring(0, 10); // Remove spaces and take first 10 chars\\n  const chatId = `${formattedDate}-${messageSnippet}`;\\n  return chatId;\\n}\\n\\n// Step 4: Check if the user selected 'New Chat' or an existing chat from the dropdown\\nconst selectedChatId = listbox1.value; // Assuming this dropdown contains \\\"New Chat\\\" or chat IDs\\nlet finalChatId;\\n\\n// Step 5: If 'New Chat' is selected, generate a new chatId\\nif (selectedChatId === \\\"New Chat\\\") {\\n  finalChatId = generateChatId(inputValue);  // Generate new chatId using the first message\\n} else {\\n  finalChatId = selectedChatId;  // Use the selected existing chatId\\n}\\n\\n// Step 6: First, trigger the AI query (query6) to get the AI's response\\nquery6.trigger({\\n  onSuccess: function() {\\n    // Step 7: Get the AI response from query6.data\\n    const aiMessage = query6.data;  // Get the AI response directly from query6.data\\n\\n    // Ensure the AI response is not null or empty\\n    if (aiMessage && aiMessage.trim() !== \\\"\\\") {\\n      // Step 8: Save the user message in the database using query3\\n      query3.trigger({\\n        additionalScope: {\\n          chatId: finalChatId,          // Use the generated or selected chatId\\n          valueToInsert: inputValue,    // Message content from the textbox\\n          valueMessenger: messenger,    // Either 'user' or 'bot'\\n          valueDate: messageDate,       // Current date\\n          valueTime: messageTime        // Current time\\n        },\\n        onSuccess: function(data) {\\n          utils.showNotification({\\n            title: \\\"Message saved!\\\",\\n            description: \\\"User's message has been successfully saved to the database.\\\",\\n            type: \\\"success\\\"\\n          });\\n\\n          // Step 9: Save the AI's message as a new entry in the database\\n          query3.trigger({\\n            additionalScope: {\\n              chatId: finalChatId,          // Use the same chatId\\n              valueToInsert: aiMessage,     // AI response message\\n              valueMessenger: \\\"bot\\\",        // Mark it as coming from the \\\"bot\\\"\\n              valueDate: messageDate,       // Current date\\n              valueTime: messageTime        // Current time\\n            },\\n            onSuccess: function(data) {\\n              utils.showNotification({\\n                title: \\\"AI Response Saved!\\\",\\n                description: \\\"The AI response has been successfully saved to the database.\\\",\\n                type: \\\"success\\\"\\n              });\\n            },\\n            onFailure: function(error) {\\n              utils.showNotification({\\n                title: \\\"Error\\\",\\n                description: \\\"Failed to save the AI response.\\\",\\n                type: \\\"error\\\"\\n              });\\n            }\\n          });\\n        },\\n        onFailure: function(error) {\\n          utils.showNotification({\\n            title: \\\"Error\\\",\\n            description: \\\"Failed to save the user message.\\\",\\n            type: \\\"error\\\"\\n          });\\n        }\\n      });\\n    } else {\\n      // If AI didn't return a valid response\\n      utils.showNotification({\\n        title: \\\"No Response from AI\\\",\\n        description: \\\"The AI did not return a valid response.\\\",\\n        type: \\\"warning\\\"\\n      });\\n    }\\n  },\\n  onFailure: function(error) {\\n    utils.showNotification({\\n      title: \\\"Error\\\",\\n      description: \\\"Failed to trigger AI query.\\\",\\n      type: \\\"error\\\"\\n    });\\n  }\\n});\\n\"]],\"waitType\",\"debounce\",\"waitMs\",\"0\"]],[\"^15\",[\"event\",\"click\",\"type\",\"datasource\",\"method\",\"trigger\",\"pluginId\",\"query1\",\"targetId\",null,\"params\",[\"^15\",[]],\"waitType\",\"debounce\",\"waitMs\",\"0\"]]]],\"loading\",false,\"loaderPosition\",\"auto\",\"disabled\",false,\"maintainSpaceWhenHidden\",false]],\"^1=\",[\"^15\",[]],\"^1>\",[\"^0\",[\"^ \",\"n\",\"position2\",\"v\",[\"^ \",\"^17\",\"grid\",\"^1B\",\"\",\"^1F\",\"body\",\"^1G\",\"\",\"row\",23.599999999999998,\"col\",7,\"^1H\",1.6,\"^1I\",1,\"^1J\",0,\"^1K\",null]]],\"^1?\",null,\"^1@\",null,\"^1A\",null,\"^1B\",\"\",\"^7\",\"~m1726464066583\",\"^1C\",\"~m1726647175210\",\"^1D\",\"\",\"^1E\",null]]],\"query3\",[\"^0\",[\"^ \",\"n\",\"pluginTemplate\",\"v\",[\"^ \",\"id\",\"query3\",\"^16\",null,\"^17\",\"datasource\",\"^18\",\"SqlQueryUnified\",\"^19\",null,\"^1:\",\"763b16ef-4d31-4d37-a0fe-40644800f657\",\"^1;\",\"retool_db\",\"^1<\",[\"^15\",[\"queryRefreshTime\",\"\",\"allowedGroupIds\",[\"^B\",[]],\"streamResponse\",false,\"records\",\"\",\"lastReceivedFromResourceAt\",null,\"databasePasswordOverride\",\"\",\"queryDisabledMessage\",\"\",\"servedFromCache\",false,\"offlineUserQueryInputs\",\"\",\"successMessage\",\"\",\"queryDisabled\",\"\",\"playgroundQuerySaveId\",\"latest\",\"workflowParams\",null,\"resourceNameOverride\",\"\",\"runWhenModelUpdates\",false,\"showFailureToaster\",true,\"query\",\"INSERT INTO messages (chat_id, message, messenger, message_date, message_time)\\nVALUES ({{ chatId }}, {{ valueToInsert }}, {{ valueMessenger }}, {{ valueDate }}, {{ valueTime }});\\n\",\"playgroundQueryUuid\",\"\",\"playgroundQueryId\",null,\"error\",null,\"workflowRunBodyType\",\"raw\",\"privateParams\",[\"^B\",[]],\"queryRunOnSelectorUpdate\",false,\"runWhenPageLoadsDelay\",\"\",\"warningCodes\",[\"^B\",[]],\"data\",null,\"recordId\",\"\",\"importedQueryInputs\",[\"^15\",[]],\"_additionalScope\",[\"^B\",[]],\"isImported\",false,\"showSuccessToaster\",false,\"dataArray\",[\"^B\",[]],\"cacheKeyTtl\",\"\",\"filterBy\",\"\",\"requestSentTimestamp\",null,\"databaseHostOverride\",\"\",\"metadata\",null,\"editorMode\",\"sql\",\"queryRunTime\",null,\"actionType\",\"\",\"changesetObject\",\"\",\"shouldUseLegacySql\",false,\"offlineOptimisticResponse\",null,\"errorTransformer\",\"return data.error\",\"finished\",null,\"databaseNameOverride\",\"\",\"confirmationMessage\",null,\"isFetching\",false,\"changeset\",\"\",\"rawData\",null,\"queryTriggerDelay\",\"0\",\"resourceTypeOverride\",null,\"watchedParams\",[\"^B\",[]],\"enableErrorTransformer\",false,\"databaseWarehouseOverride\",\"\",\"enableBulkUpdates\",false,\"showLatestVersionUpdatedWarning\",false,\"timestamp\",0,\"importedQueryDefaults\",[\"^15\",[]],\"enableTransformer\",true,\"showUpdateSetValueDynamicallyToggle\",false,\"overrideOrgCacheForUserCache\",false,\"bulkUpdatePrimaryKey\",\"\",\"runWhenPageLoads\",false,\"transformer\",\"return data\",\"events\",[\"^B\",[]],\"tableName\",\"\",\"queryTimeout\",\"10000\",\"workflowId\",null,\"requireConfirmation\",false,\"queryFailureConditions\",\"\",\"changesetIsObject\",false,\"enableCaching\",false,\"allowedGroups\",[\"^B\",[]],\"databaseUsernameOverride\",\"\",\"databaseRoleOverride\",\"\",\"shouldEnableBatchQuerying\",false,\"doNotThrowOnNoOp\",false,\"offlineQueryType\",\"None\",\"queryThrottleTime\",\"750\",\"updateSetValueDynamically\",true,\"notificationDuration\",4.5]],\"^1=\",null,\"^1>\",null,\"^1?\",null,\"^1@\",null,\"^1A\",null,\"^1B\",\"\",\"^7\",\"~m1726466796456\",\"^1C\",\"~m1726468311834\",\"^1D\",\"\",\"^1E\",null]]],\"query4\",[\"^0\",[\"^ \",\"n\",\"pluginTemplate\",\"v\",[\"^ \",\"id\",\"query4\",\"^16\",null,\"^17\",\"datasource\",\"^18\",\"SqlQueryUnified\",\"^19\",null,\"^1:\",\"763b16ef-4d31-4d37-a0fe-40644800f657\",\"^1;\",\"retool_db\",\"^1<\",[\"^15\",[\"queryRefreshTime\",\"\",\"allowedGroupIds\",[\"^B\",[]],\"streamResponse\",false,\"records\",\"\",\"lastReceivedFromResourceAt\",null,\"databasePasswordOverride\",\"\",\"queryDisabledMessage\",\"\",\"servedFromCache\",false,\"offlineUserQueryInputs\",\"\",\"successMessage\",\"\",\"queryDisabled\",\"\",\"playgroundQuerySaveId\",\"latest\",\"workflowParams\",null,\"resourceNameOverride\",\"\",\"runWhenModelUpdates\",true,\"showFailureToaster\",true,\"query\",\"SELECT * FROM messages\\nWHERE chat_id = {{ listbox1.value }}\\nORDER BY message_date, message_time;\\n\",\"playgroundQueryUuid\",\"\",\"playgroundQueryId\",null,\"error\",null,\"workflowRunBodyType\",\"raw\",\"privateParams\",[\"^B\",[]],\"queryRunOnSelectorUpdate\",false,\"runWhenPageLoadsDelay\",\"\",\"warningCodes\",[\"^B\",[]],\"data\",null,\"recordId\",\"\",\"importedQueryInputs\",[\"^15\",[]],\"_additionalScope\",[\"^B\",[]],\"isImported\",false,\"showSuccessToaster\",true,\"dataArray\",[\"^B\",[]],\"cacheKeyTtl\",\"\",\"filterBy\",\"\",\"requestSentTimestamp\",null,\"databaseHostOverride\",\"\",\"metadata\",null,\"editorMode\",\"sql\",\"queryRunTime\",null,\"actionType\",\"\",\"changesetObject\",\"\",\"shouldUseLegacySql\",false,\"offlineOptimisticResponse\",null,\"errorTransformer\",\"return data.error\",\"finished\",null,\"databaseNameOverride\",\"\",\"confirmationMessage\",null,\"isFetching\",false,\"changeset\",\"\",\"rawData\",null,\"queryTriggerDelay\",\"0\",\"resourceTypeOverride\",null,\"watchedParams\",[\"^B\",[]],\"enableErrorTransformer\",false,\"databaseWarehouseOverride\",\"\",\"enableBulkUpdates\",false,\"showLatestVersionUpdatedWarning\",false,\"timestamp\",0,\"importedQueryDefaults\",[\"^15\",[]],\"enableTransformer\",false,\"showUpdateSetValueDynamicallyToggle\",true,\"overrideOrgCacheForUserCache\",false,\"bulkUpdatePrimaryKey\",\"\",\"runWhenPageLoads\",false,\"transformer\",\"return data\",\"events\",null,\"isMultiplayerEdited\",false,\"tableName\",\"\",\"queryTimeout\",\"10000\",\"workflowId\",null,\"requireConfirmation\",false,\"queryFailureConditions\",\"\",\"changesetIsObject\",false,\"enableCaching\",false,\"allowedGroups\",[\"^B\",[]],\"databaseUsernameOverride\",\"\",\"databaseRoleOverride\",\"\",\"shouldEnableBatchQuerying\",false,\"doNotThrowOnNoOp\",false,\"offlineQueryType\",\"None\",\"queryThrottleTime\",\"750\",\"updateSetValueDynamically\",false,\"notificationDuration\",\"\"]],\"^1=\",null,\"^1>\",null,\"^1?\",null,\"^1@\",null,\"^1A\",null,\"^1B\",\"\",\"^7\",\"~m1726475500241\",\"^1C\",\"~m1726574916697\",\"^1D\",\"\",\"^1E\",null]]],\"query5\",[\"^0\",[\"^ \",\"n\",\"pluginTemplate\",\"v\",[\"^ \",\"id\",\"query5\",\"^16\",null,\"^17\",\"datasource\",\"^18\",\"SqlQueryUnified\",\"^19\",null,\"^1:\",\"763b16ef-4d31-4d37-a0fe-40644800f657\",\"^1;\",\"retool_db\",\"^1<\",[\"^15\",[\"queryRefreshTime\",\"\",\"allowedGroupIds\",[\"^B\",[]],\"streamResponse\",false,\"records\",\"\",\"lastReceivedFromResourceAt\",null,\"databasePasswordOverride\",\"\",\"queryDisabledMessage\",\"\",\"servedFromCache\",false,\"offlineUserQueryInputs\",\"\",\"successMessage\",\"\",\"queryDisabled\",\"\",\"playgroundQuerySaveId\",\"latest\",\"workflowParams\",null,\"resourceNameOverride\",\"\",\"runWhenModelUpdates\",true,\"showFailureToaster\",true,\"query\",\"SELECT * FROM (\\n  SELECT 'New Chat' as chat_id, NULL as last_message_date  -- Add the \\\"New Chat\\\" option\\n  UNION\\n  SELECT chat_id, MAX(message_date) as last_message_date\\n  FROM messages\\n  GROUP BY chat_id\\n) as subquery\\nORDER BY last_message_date DESC NULLS LAST;  -- Sort, ensuring \\\"New Chat\\\" is at the top\\n\",\"playgroundQueryUuid\",\"\",\"playgroundQueryId\",null,\"error\",null,\"workflowRunBodyType\",\"raw\",\"privateParams\",[\"^B\",[]],\"queryRunOnSelectorUpdate\",false,\"runWhenPageLoadsDelay\",\"\",\"warningCodes\",[\"^B\",[]],\"data\",null,\"recordId\",\"\",\"importedQueryInputs\",[\"^15\",[]],\"_additionalScope\",[\"^B\",[]],\"isImported\",false,\"showSuccessToaster\",true,\"dataArray\",[\"^B\",[]],\"cacheKeyTtl\",\"\",\"filterBy\",\"\",\"requestSentTimestamp\",null,\"databaseHostOverride\",\"\",\"metadata\",null,\"editorMode\",\"sql\",\"queryRunTime\",null,\"actionType\",\"\",\"changesetObject\",\"\",\"shouldUseLegacySql\",false,\"offlineOptimisticResponse\",null,\"errorTransformer\",\"return data.error\",\"finished\",null,\"databaseNameOverride\",\"\",\"confirmationMessage\",null,\"isFetching\",false,\"changeset\",\"\",\"rawData\",null,\"queryTriggerDelay\",\"0\",\"resourceTypeOverride\",null,\"watchedParams\",[\"^B\",[]],\"enableErrorTransformer\",false,\"databaseWarehouseOverride\",\"\",\"enableBulkUpdates\",false,\"showLatestVersionUpdatedWarning\",false,\"timestamp\",0,\"importedQueryDefaults\",[\"^15\",[]],\"enableTransformer\",false,\"showUpdateSetValueDynamicallyToggle\",true,\"overrideOrgCacheForUserCache\",false,\"bulkUpdatePrimaryKey\",\"\",\"runWhenPageLoads\",false,\"transformer\",\"return data\",\"events\",null,\"tableName\",\"\",\"queryTimeout\",\"10000\",\"workflowId\",null,\"requireConfirmation\",false,\"queryFailureConditions\",\"\",\"changesetIsObject\",false,\"enableCaching\",false,\"allowedGroups\",[\"^B\",[]],\"databaseUsernameOverride\",\"\",\"databaseRoleOverride\",\"\",\"shouldEnableBatchQuerying\",false,\"doNotThrowOnNoOp\",false,\"offlineQueryType\",\"None\",\"queryThrottleTime\",\"750\",\"updateSetValueDynamically\",false,\"notificationDuration\",\"\"]],\"^1=\",null,\"^1>\",null,\"^1?\",null,\"^1@\",null,\"^1A\",null,\"^1B\",\"\",\"^7\",\"~m1726482882052\",\"^1C\",\"~m1726487001286\",\"^1D\",\"\",\"^1E\",null]]],\"query6\",[\"^0\",[\"^ \",\"n\",\"pluginTemplate\",\"v\",[\"^ \",\"id\",\"query6\",\"^16\",null,\"^17\",\"datasource\",\"^18\",\"RetoolAIQuery\",\"^19\",null,\"^1:\",\"retool_ai\",\"^1;\",\"retool_ai\",\"^1<\",[\"^15\",[\"vectorNamespaceIds\",[\"^B\",[]],\"vectorDynamicUrls\",\"\",\"queryRefreshTime\",\"\",\"allowedGroupIds\",[\"^B\",[]],\"vectorActionNamespaceDynamicModeEnabled\",false,\"vectorCreateAndFetchDynamicModeEnabled\",false,\"streamResponse\",true,\"imageClassifierDynamicLabels\",\"\",\"lastReceivedFromResourceAt\",null,\"vectorSemanticSearchString\",\"\",\"queryDisabledMessage\",\"\",\"customTemperature\",\"1\",\"servedFromCache\",false,\"offlineUserQueryInputs\",\"\",\"successMessage\",\"\",\"queryDisabled\",\"\",\"playgroundQuerySaveId\",\"latest\",\"workflowParams\",null,\"resourceNameOverride\",\"\",\"runWhenModelUpdates\",false,\"showFailureToaster\",true,\"vectorUrls\",[\"^B\",[]],\"customSystemMessage\",\"\\\"\\\"\\\"You are an intelligent, friendly chatbot designed to assist users from ARC with general life questions.\\n                                            Your responses should be informative, easy to understand, and tailored to the needs of the user.\\n                                            You can provide answers on a wide variety of topics, including health, work-life balance, personal development, hobbies, relationships, and more.\\n                                            You are expected to provide helpful advice, factual information, and when needed, suggest practical solutions.\\n                                            Keep your answers concise, thoughtful, and approachable, while making sure to address the user's needs thoroughly.\\n                                            If you don't know the answer or need more clarification, kindly ask for additional information or suggest credible resources.\\n\\n                                        \\\"\\\"\\\"\",\"textExtractorDynamicLabels\",\"\",\"imageExtractorLabels\",[\"^B\",[]],\"query\",\"\",\"playgroundQueryUuid\",\"\",\"imageExtractorDynamicModeEnabled\",false,\"playgroundQueryId\",null,\"error\",null,\"workflowRunBodyType\",\"raw\",\"privateParams\",[\"^B\",[]],\"model\",\"gpt-3.5-turbo\",\"queryRunOnSelectorUpdate\",false,\"runWhenPageLoadsDelay\",\"\",\"data\",null,\"defaultModelInitialized\",true,\"providerId\",\"retoolAIBuiltIn::openAI\",\"textClassifierLabels\",[\"^B\",[]],\"textClassifierDynamicModeEnabled\",false,\"importedQueryInputs\",[\"^15\",[]],\"instruction\",\"{{ textInput1.value }}\",\"isImported\",false,\"imageModel\",\"dall-e-3\",\"showSuccessToaster\",false,\"fileUseDynamicSource\",false,\"cacheKeyTtl\",\"\",\"requestSentTimestamp\",null,\"metadata\",null,\"textClassifierDynamicLabels\",\"\",\"queryRunTime\",null,\"changesetObject\",\"\",\"offlineOptimisticResponse\",null,\"errorTransformer\",\"return data.error\",\"finished\",null,\"confirmationMessage\",null,\"isFetching\",false,\"changeset\",\"\",\"chatInput\",\"\",\"rawData\",null,\"vectorNamespaceId\",\"\",\"queryTriggerDelay\",\"0\",\"resourceTypeOverride\",null,\"watchedParams\",[\"^B\",[]],\"vectorDynamicNamespaces\",\"\",\"enableErrorTransformer\",false,\"imageExtractorDynamicLabels\",\"\",\"multimodalModel\",\"gpt-4o\",\"showLatestVersionUpdatedWarning\",false,\"vectorActionDynamicNamespace\",\"\",\"timestamp\",0,\"textExtractorDynamicModeEnabled\",false,\"action\",\"textGeneration\",\"textExtractorLabels\",[\"^B\",[]],\"importedQueryDefaults\",[\"^15\",[]],\"enableTransformer\",true,\"showUpdateSetValueDynamicallyToggle\",true,\"fileSource\",\"\",\"systemMessage\",\"You are a helpful assistant\",\"overrideOrgCacheForUserCache\",false,\"runWhenPageLoads\",false,\"content\",\"\",\"transformer\",\"return data\",\"events\",[\"^B\",[]],\"vectorAction\",\"upsertDocument\",\"queryTimeout\",\"120000\",\"workflowId\",null,\"vectorNamespacesDynamicModeEnabled\",false,\"requireConfirmation\",false,\"queryFailureConditions\",\"\",\"source\",\"\",\"imageClassifierLabels\",[\"^B\",[]],\"imageClassifierDynamicModeEnabled\",false,\"changesetIsObject\",false,\"vectorModeEnabled\",false,\"vectorNamespaceIdsFilters\",[\"^B\",[]],\"providerName\",\"openAI\",\"enableCaching\",false,\"allowedGroups\",[\"^B\",[]],\"chatHistory\",\"\",\"imageContent\",\"\",\"offlineQueryType\",\"None\",\"queryThrottleTime\",\"750\",\"updateSetValueDynamically\",false,\"notificationDuration\",4.5]],\"^1=\",null,\"^1>\",null,\"^1?\",null,\"^1@\",null,\"^1A\",null,\"^1B\",\"\",\"^7\",\"~m1726487815297\",\"^1C\",\"~m1726570587865\",\"^1D\",\"\",\"^1E\",null]]],\"customComponent2\",[\"^0\",[\"^ \",\"n\",\"pluginTemplate\",\"v\",[\"^ \",\"id\",\"customComponent2\",\"^16\",\"ff443d2b-5684-4e6a-8268-30e086cf5200\",\"^17\",\"widget\",\"^18\",\"CustomComponentWidget\",\"^19\",null,\"^1:\",null,\"^1;\",null,\"^1<\",[\"^15\",[\"allowTopNavigation\",false,\"heightType\",\"fixed\",\"allowDownloads\",false,\"allowFullscreen\",true,\"allowForms\",false,\"model\",\"{\\n  \\\"client\\\": \\\"{{ listbox1.value }}\\\",  // The current user or client selected from a dropdown\\n  \\\"timezone\\\": \\\"UTC\\\",  // Set dynamically if needed, or keep it fixed\\n  \\\"data\\\": {{ query4.data }},  // The messages data fetched from query4\\n  \\\"queryToLoadMessages\\\": \\\"query4\\\"  // The query that loads messages\\n}\\n\",\"allowCamera\",false,\"allowModals\",false,\"allowPopups\",true,\"iframeCode\",\"<!-- Load React and ReactDOM libraries -->\\n<script src=\\\"https://cdn.tryretool.com/js/react.production.min.js\\\" crossorigin></script>\\n<script src=\\\"https://cdn.tryretool.com/js/react-dom.production.min.js\\\" crossorigin></script>\\n\\n<!-- Load Moment.js and Moment Timezone libraries -->\\n<script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js\\\"></script>\\n<script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.34/moment-timezone-with-data.min.js\\\"></script>\\n\\n<!-- Style for the component -->\\n<style>\\n  body {\\n    margin: 0;\\n    padding: 10px;\\n    font-family: 'Overpass', sans-serif;\\n  }\\n  \\n  .card-content {\\n    min-height: 100%;\\n    background: #ece5dd;\\n  }\\n\\n  .msg-container {\\n    width: 90%;\\n    margin: 10px 0;\\n    white-space: pre-line;\\n    overflow-wrap: break-word;\\n  }\\n\\n  .msg-container-right {\\n    margin-left: 10%;\\n  }\\n\\n  /* User message */\\n  .msg-right {\\n    background: #f1f0f0; /* User message background */\\n    border-radius: 15px 15px 15px 4px;\\n    padding: 10px;\\n    color: #333;\\n  }\\n\\n  /* Bot message */\\n  .msg-left {\\n    background: #d1e7ff; /* Bot message background */\\n    border-radius: 15px 15px 4px 15px;\\n    padding: 10px;\\n    color: #000;\\n  }\\n\\n  .message-data-time {\\n    color: #888888;\\n    padding-left: 6px;\\n    font-size: 12px;\\n  }\\n</style>\\n\\n<!-- Custom component -->\\n<div id=\\\"react\\\"></div>\\n\\n<script type=\\\"text/babel\\\">\\n  class MyCustomComponent extends React.Component {\\n    constructor(props) {\\n      super(props);\\n    }\\n\\n    componentDidMount() {\\n      // Set up polling to check for new data every 5 seconds\\n      this.intervalId = setInterval(() => {\\n        this.props.triggerQuery(this.props.model.queryToLoadMessages); // Trigger query to check for new messages\\n      }, 5000);\\n    }\\n\\n    componentWillUnmount() {\\n      // Clear the polling interval when the component unmounts\\n      clearInterval(this.intervalId);\\n    }\\n\\n    render() {\\n      const { model } = this.props;\\n\\n      // Check if the selection is \\\"New Chat\\\"\\n      if (model.client === \\\"New Chat\\\") {\\n        return (\\n          <div className=\\\"card-content\\\">\\n            <p>Hi! I'm your assistant, here to help ARC employees with any questions. Whether it's about petroleum research or personal development, feel free to ask!</p>\\n          </div>\\n        );\\n      }\\n\\n      const messages = model.data || { message: [], messenger: [], message_date: [], message_time: [] };\\n\\n      if (!messages || !messages.message || messages.message.length === 0) {\\n        return <p>No messages found for this chat.</p>;\\n      }\\n\\n      return (\\n        <div className=\\\"card-content\\\">\\n          {messages.message.map((_, index) => {\\n            const time = moment(`${messages.message_date[index]} ${messages.message_time[index]}`).format(\\\"ddd, MMM D - hh:mm A\\\");\\n\\n            // Check if it's a user or bot message and apply the correct class\\n            const isUser = messages.messenger[index] === \\\"user\\\";\\n\\n            return (\\n              <div className={isUser ? \\\"msg-container-right msg-container\\\" : \\\"msg-container\\\"} key={index}>\\n                <span className=\\\"message-data-time\\\">\\n                  {time} {isUser ? \\\"✔\\\" : \\\"\\\"} {\\\"#\\\" + index}\\n                </span>\\n                {messages.message[index] && (\\n                  <div className={isUser ? \\\"msg-right\\\" : \\\"msg-left\\\"}>\\n                    {messages.message[index]}\\n                  </div>\\n                )}\\n              </div>\\n            );\\n          })}\\n          <div id=\\\"scrollToBottom\\\"></div>\\n        </div>\\n      );\\n    }\\n  }\\n\\n  const ConnectedComponent = Retool.connectReactComponent(MyCustomComponent);\\n  ReactDOM.render(<ConnectedComponent />, document.getElementById(\\\"react\\\"));\\n</script>\\n\",\"allowMicrophone\",false,\"renderInQuirksMode\",false,\"allowSameOrigin\",false,\"allowPopupsToEscapeSandbox\",false,\"allowPayment\",false,\"allowGeolocation\",false]],\"^1=\",[\"^15\",[]],\"^1>\",[\"^0\",[\"^ \",\"n\",\"position2\",\"v\",[\"^ \",\"^17\",\"grid\",\"^1B\",\"\",\"^1F\",\"body\",\"^1G\",\"\",\"row\",11.4,\"col\",2,\"^1H\",12.2,\"^1I\",6,\"^1J\",0,\"^1K\",null]]],\"^1?\",null,\"^1@\",null,\"^1A\",null,\"^1B\",\"\",\"^7\",\"~m1726566956487\",\"^1C\",\"~m1726645846484\",\"^1D\",\"\",\"^1E\",null]]],\"listbox1\",[\"^0\",[\"^ \",\"n\",\"pluginTemplate\",\"v\",[\"^ \",\"id\",\"listbox1\",\"^16\",\"18f5d936-c3a0-4d2d-ba80-ed030f408488\",\"^17\",\"widget\",\"^18\",\"ListboxWidget\",\"^19\",null,\"^1:\",null,\"^1;\",null,\"^1<\",[\"^15\",[\"imageByIndex\",[],\"_disabledByIndex\",[\"^B\",[]],\"showSelectionIndicator\",true,\"_values\",[\"^B\",[]],\"iconByIndex\",[],\"values\",\"{{ item.chat_id }}\",\"_iconByIndex\",[\"^B\",[]],\"allowDeselect\",false,\"hidden\",false,\"customValidation\",\"\",\"data\",\"{{ query5.data }}\",\"searchMode\",\"fuzzy\",\"hideValidationMessage\",false,\"fallbackTextByIndex\",[],\"_fallbackTextByIndex\",[\"^B\",[]],\"selectedItem\",null,\"validationMessage\",\"\",\"margin\",\"4px 8px\",\"automaticItemColors\",false,\"itemAdornmentShape\",\"circle\",\"showInEditor\",false,\"tooltipText\",\"\",\"labelAlign\",\"left\",\"formDataKey\",\"{{ self.id }}\",\"value\",\"{{ self.values[0] }}\",\"style\",[\"^15\",[\"background\",\"rgb(236, 229, 221)\"]],\"hiddenByIndex\",[],\"labelCaption\",\"\",\"labelWidth\",\"33\",\"deprecatedLabels\",[],\"_hiddenByIndex\",[\"^B\",[]],\"_captionByIndex\",[\"^B\",[]],\"itemAdornmentSize\",\"auto\",\"searchTerm\",\"\",\"label\",\"Chat History\",\"_hasMigratedNestedItems\",true,\"captionByIndex\",[],\"_validate\",false,\"itemMode\",\"dynamic\",\"labelWidthUnit\",\"%\",\"invalid\",false,\"selectedIndex\",null,\"_tooltipByIndex\",[\"^B\",[]],\"_colorByIndex\",[\"^B\",[]],\"tooltipByIndex\",[],\"colorByIndex\",[],\"selectedLabel\",\"\",\"events\",[\"^15\",[]],\"_ids\",[\"^B\",[]],\"emptyMessage\",\"No options\",\"disabled\",false,\"labelPosition\",\"top\",\"_labels\",[\"^B\",[]],\"labelWrap\",false,\"disabledValues\",[],\"disabledByIndex\",[],\"maintainSpaceWhenHidden\",false,\"_imageByIndex\",[\"^B\",[]],\"required\",false,\"labels\",[]]],\"^1=\",[\"^15\",[]],\"^1>\",[\"^0\",[\"^ \",\"n\",\"position2\",\"v\",[\"^ \",\"^17\",\"grid\",\"^1B\",\"\",\"^1F\",\"body\",\"^1G\",\"\",\"row\",11.000000000000002,\"col\",0,\"^1H\",12.599999999999998,\"^1I\",2,\"^1J\",0,\"^1K\",null]]],\"^1?\",null,\"^1@\",null,\"^1A\",null,\"^1B\",\"\",\"^7\",\"~m1726574778136\",\"^1C\",\"~m1726575948310\",\"^1D\",\"\",\"^1E\",null]]]]],\"preloadedAppJavaScript\",null,\"preloadedAppJSLinks\",[],\"queryStatusVisibility\",false,\"responsiveLayoutDisabled\",false,\"rootScreen\",null,\"savePlatform\",\"web\",\"shortlink\",null,\"testEntities\",[],\"tests\",[],\"urlFragmentDefinitions\",[\"^B\",[]],\"version\",\"3.123.0\"]]]"},"changesRecord":[{"type":"MIGRATIONS_SUCCESS","payload":{"migratedAppTemplate":{"tests":[],"folders":[],"plugins":{"$main":{"id":"$main","type":"frame","uuid":null,"style":{},"folder":"","screen":null,"subtype":"Frame","tabIndex":null,"template":{"type":"main","style":{"canvas":"rgba(236, 229, 221, 0.4)"},"sticky":null,"padding":"8px 12px","enableFullBleed":false,"isHiddenOnMobile":false,"isHiddenOnDesktop":false},"container":"","createdAt":"2024-09-15T10:18:46.872Z","namespace":null,"position2":null,"updatedAt":"2024-09-18T05:10:50.287Z","resourceName":null,"mobilePosition2":null,"mobileAppPosition":null,"resourceDisplayName":null},"query1":{"id":"query1","type":"datasource","uuid":null,"style":null,"folder":"","screen":null,"subtype":"SqlQueryUnified","tabIndex":null,"template":{"data":null,"error":null,"query":"","events":[{"type":"widget","event":"success","method":"scrollIntoView","params":{"options":{"block":"nearest","behavior":"auto"}},"waitMs":"0","pluginId":"button1","targetId":null,"waitType":"debounce"}],"rawData":null,"records":"","filterBy":"","finished":null,"metadata":null,"recordId":"","changeset":"","dataArray":[],"tableName":"","timestamp":0,"actionType":"","editorMode":"sql","isFetching":false,"isImported":false,"workflowId":null,"cacheKeyTtl":"","transformer":"return data","queryRunTime":null,"queryTimeout":"10000","warningCodes":[],"allowedGroups":[],"enableCaching":false,"privateParams":[],"queryDisabled":"","watchedParams":[],"streamResponse":false,"successMessage":"","workflowParams":null,"allowedGroupIds":[],"changesetObject":"","servedFromCache":false,"_additionalScope":[],"doNotThrowOnNoOp":false,"errorTransformer":"return data.error","offlineQueryType":"None","queryRefreshTime":"","runWhenPageLoads":false,"changesetIsObject":false,"enableBulkUpdates":false,"enableTransformer":true,"playgroundQueryId":null,"queryThrottleTime":"750","queryTriggerDelay":"0","shouldUseLegacySql":false,"showFailureToaster":true,"showSuccessToaster":true,"confirmationMessage":null,"importedQueryInputs":{},"isMultiplayerEdited":false,"playgroundQueryUuid":"","requireConfirmation":false,"runWhenModelUpdates":false,"workflowRunBodyType":"raw","bulkUpdatePrimaryKey":"","databaseHostOverride":"","databaseNameOverride":"","databaseRoleOverride":"","notificationDuration":"","queryDisabledMessage":"","requestSentTimestamp":null,"resourceNameOverride":"","resourceTypeOverride":"","importedQueryDefaults":{},"playgroundQuerySaveId":"latest","runWhenPageLoadsDelay":"","enableErrorTransformer":false,"offlineUserQueryInputs":"","queryFailureConditions":"","databasePasswordOverride":"","databaseUsernameOverride":"","queryRunOnSelectorUpdate":false,"databaseWarehouseOverride":"","shouldEnableBatchQuerying":false,"updateSetValueDynamically":false,"lastReceivedFromResourceAt":null,"overrideOrgCacheForUserCache":false,"showLatestVersionUpdatedWarning":false,"showUpdateSetValueDynamicallyToggle":true},"container":"","createdAt":"2024-09-15T10:21:02.824Z","namespace":null,"position2":null,"updatedAt":"2024-09-16T08:09:30.188Z","resourceName":"763b16ef-4d31-4d37-a0fe-40644800f657","mobilePosition2":null,"mobileAppPosition":null,"resourceDisplayName":null},"query3":{"id":"query3","type":"datasource","uuid":null,"style":null,"folder":"","screen":null,"subtype":"SqlQueryUnified","tabIndex":null,"template":{"data":null,"error":null,"query":"INSERT INTO messages (chat_id, message, messenger, message_date, message_time)\nVALUES ({{ chatId }}, {{ valueToInsert }}, {{ valueMessenger }}, {{ valueDate }}, {{ valueTime }});\n","events":[],"rawData":null,"records":"","filterBy":"","finished":null,"metadata":null,"recordId":"","changeset":"","dataArray":[],"tableName":"","timestamp":0,"actionType":"","editorMode":"sql","isFetching":false,"isImported":false,"workflowId":null,"cacheKeyTtl":"","transformer":"return data","queryRunTime":null,"queryTimeout":"10000","warningCodes":[],"allowedGroups":[],"enableCaching":false,"privateParams":[],"queryDisabled":"","watchedParams":[],"streamResponse":false,"successMessage":"","workflowParams":null,"allowedGroupIds":[],"changesetObject":"","servedFromCache":false,"_additionalScope":[],"doNotThrowOnNoOp":false,"errorTransformer":"return data.error","offlineQueryType":"None","queryRefreshTime":"","runWhenPageLoads":false,"changesetIsObject":false,"enableBulkUpdates":false,"enableTransformer":true,"playgroundQueryId":null,"queryThrottleTime":"750","queryTriggerDelay":"0","shouldUseLegacySql":false,"showFailureToaster":true,"showSuccessToaster":false,"confirmationMessage":null,"importedQueryInputs":{},"playgroundQueryUuid":"","requireConfirmation":false,"runWhenModelUpdates":false,"workflowRunBodyType":"raw","bulkUpdatePrimaryKey":"","databaseHostOverride":"","databaseNameOverride":"","databaseRoleOverride":"","notificationDuration":4.5,"queryDisabledMessage":"","requestSentTimestamp":null,"resourceNameOverride":"","resourceTypeOverride":null,"importedQueryDefaults":{},"playgroundQuerySaveId":"latest","runWhenPageLoadsDelay":"","enableErrorTransformer":false,"offlineUserQueryInputs":"","queryFailureConditions":"","databasePasswordOverride":"","databaseUsernameOverride":"","queryRunOnSelectorUpdate":false,"databaseWarehouseOverride":"","shouldEnableBatchQuerying":false,"updateSetValueDynamically":true,"lastReceivedFromResourceAt":null,"overrideOrgCacheForUserCache":false,"showLatestVersionUpdatedWarning":false,"showUpdateSetValueDynamicallyToggle":false},"container":"","createdAt":"2024-09-16T06:06:36.456Z","namespace":null,"position2":null,"updatedAt":"2024-09-16T06:31:51.834Z","resourceName":"763b16ef-4d31-4d37-a0fe-40644800f657","mobilePosition2":null,"mobileAppPosition":null,"resourceDisplayName":null},"query4":{"id":"query4","type":"datasource","uuid":null,"style":null,"folder":"","screen":null,"subtype":"SqlQueryUnified","tabIndex":null,"template":{"data":null,"error":null,"query":"SELECT * FROM messages\nWHERE chat_id = {{ listbox1.value }}\nORDER BY message_date, message_time;\n","events":null,"rawData":null,"records":"","filterBy":"","finished":null,"metadata":null,"recordId":"","changeset":"","dataArray":[],"tableName":"","timestamp":0,"actionType":"","editorMode":"sql","isFetching":false,"isImported":false,"workflowId":null,"cacheKeyTtl":"","transformer":"return data","queryRunTime":null,"queryTimeout":"10000","warningCodes":[],"allowedGroups":[],"enableCaching":false,"privateParams":[],"queryDisabled":"","watchedParams":[],"streamResponse":false,"successMessage":"","workflowParams":null,"allowedGroupIds":[],"changesetObject":"","servedFromCache":false,"_additionalScope":[],"doNotThrowOnNoOp":false,"errorTransformer":"return data.error","offlineQueryType":"None","queryRefreshTime":"","runWhenPageLoads":false,"changesetIsObject":false,"enableBulkUpdates":false,"enableTransformer":false,"playgroundQueryId":null,"queryThrottleTime":"750","queryTriggerDelay":"0","shouldUseLegacySql":false,"showFailureToaster":true,"showSuccessToaster":true,"confirmationMessage":null,"importedQueryInputs":{},"isMultiplayerEdited":false,"playgroundQueryUuid":"","requireConfirmation":false,"runWhenModelUpdates":true,"workflowRunBodyType":"raw","bulkUpdatePrimaryKey":"","databaseHostOverride":"","databaseNameOverride":"","databaseRoleOverride":"","notificationDuration":"","queryDisabledMessage":"","requestSentTimestamp":null,"resourceNameOverride":"","resourceTypeOverride":null,"importedQueryDefaults":{},"playgroundQuerySaveId":"latest","runWhenPageLoadsDelay":"","enableErrorTransformer":false,"offlineUserQueryInputs":"","queryFailureConditions":"","databasePasswordOverride":"","databaseUsernameOverride":"","queryRunOnSelectorUpdate":false,"databaseWarehouseOverride":"","shouldEnableBatchQuerying":false,"updateSetValueDynamically":false,"lastReceivedFromResourceAt":null,"overrideOrgCacheForUserCache":false,"showLatestVersionUpdatedWarning":false,"showUpdateSetValueDynamicallyToggle":true},"container":"","createdAt":"2024-09-16T08:31:40.241Z","namespace":null,"position2":null,"updatedAt":"2024-09-17T12:08:36.697Z","resourceName":"763b16ef-4d31-4d37-a0fe-40644800f657","mobilePosition2":null,"mobileAppPosition":null,"resourceDisplayName":null},"query5":{"id":"query5","type":"datasource","uuid":null,"style":null,"folder":"","screen":null,"subtype":"SqlQueryUnified","tabIndex":null,"template":{"data":null,"error":null,"query":"SELECT * FROM (\n  SELECT 'New Chat' as chat_id, NULL as last_message_date  -- Add the \"New Chat\" option\n  UNION\n  SELECT chat_id, MAX(message_date) as last_message_date\n  FROM messages\n  GROUP BY chat_id\n) as subquery\nORDER BY last_message_date DESC NULLS LAST;  -- Sort, ensuring \"New Chat\" is at the top\n","events":null,"rawData":null,"records":"","filterBy":"","finished":null,"metadata":null,"recordId":"","changeset":"","dataArray":[],"tableName":"","timestamp":0,"actionType":"","editorMode":"sql","isFetching":false,"isImported":false,"workflowId":null,"cacheKeyTtl":"","transformer":"return data","queryRunTime":null,"queryTimeout":"10000","warningCodes":[],"allowedGroups":[],"enableCaching":false,"privateParams":[],"queryDisabled":"","watchedParams":[],"streamResponse":false,"successMessage":"","workflowParams":null,"allowedGroupIds":[],"changesetObject":"","servedFromCache":false,"_additionalScope":[],"doNotThrowOnNoOp":false,"errorTransformer":"return data.error","offlineQueryType":"None","queryRefreshTime":"","runWhenPageLoads":false,"changesetIsObject":false,"enableBulkUpdates":false,"enableTransformer":false,"playgroundQueryId":null,"queryThrottleTime":"750","queryTriggerDelay":"0","shouldUseLegacySql":false,"showFailureToaster":true,"showSuccessToaster":true,"confirmationMessage":null,"importedQueryInputs":{},"playgroundQueryUuid":"","requireConfirmation":false,"runWhenModelUpdates":true,"workflowRunBodyType":"raw","bulkUpdatePrimaryKey":"","databaseHostOverride":"","databaseNameOverride":"","databaseRoleOverride":"","notificationDuration":"","queryDisabledMessage":"","requestSentTimestamp":null,"resourceNameOverride":"","resourceTypeOverride":null,"importedQueryDefaults":{},"playgroundQuerySaveId":"latest","runWhenPageLoadsDelay":"","enableErrorTransformer":false,"offlineUserQueryInputs":"","queryFailureConditions":"","databasePasswordOverride":"","databaseUsernameOverride":"","queryRunOnSelectorUpdate":false,"databaseWarehouseOverride":"","shouldEnableBatchQuerying":false,"updateSetValueDynamically":false,"lastReceivedFromResourceAt":null,"overrideOrgCacheForUserCache":false,"showLatestVersionUpdatedWarning":false,"showUpdateSetValueDynamicallyToggle":true},"container":"","createdAt":"2024-09-16T10:34:42.052Z","namespace":null,"position2":null,"updatedAt":"2024-09-16T11:43:21.286Z","resourceName":"763b16ef-4d31-4d37-a0fe-40644800f657","mobilePosition2":null,"mobileAppPosition":null,"resourceDisplayName":null},"query6":{"id":"query6","type":"datasource","uuid":null,"style":null,"folder":"","screen":null,"subtype":"RetoolAIQuery","tabIndex":null,"template":{"data":null,"error":null,"model":"gpt-3.5-turbo","query":"","action":"textGeneration","events":[],"source":"","content":"","rawData":null,"finished":null,"metadata":null,"changeset":"","chatInput":"","timestamp":0,"fileSource":"","imageModel":"dall-e-3","isFetching":false,"isImported":false,"providerId":"retoolAIBuiltIn::openAI","vectorUrls":[],"workflowId":null,"cacheKeyTtl":"","chatHistory":"","instruction":"{{ textInput1.value }}","transformer":"return data","imageContent":"","providerName":"openAI","queryRunTime":null,"queryTimeout":"120000","vectorAction":"upsertDocument","allowedGroups":[],"enableCaching":false,"privateParams":[],"queryDisabled":"","systemMessage":"You are a helpful assistant","watchedParams":[],"streamResponse":true,"successMessage":"","workflowParams":null,"allowedGroupIds":[],"changesetObject":"","multimodalModel":"gpt-4o","servedFromCache":false,"errorTransformer":"return data.error","offlineQueryType":"None","queryRefreshTime":"","runWhenPageLoads":false,"changesetIsObject":false,"customTemperature":"1","enableTransformer":true,"playgroundQueryId":null,"queryThrottleTime":"750","queryTriggerDelay":"0","vectorDynamicUrls":"","vectorModeEnabled":false,"vectorNamespaceId":"","showFailureToaster":true,"showSuccessToaster":false,"vectorNamespaceIds":[],"confirmationMessage":null,"customSystemMessage":"\"\"\"You are an intelligent, friendly chatbot designed to assist users from ARC with general life questions.\n                                            Your responses should be informative, easy to understand, and tailored to the needs of the user.\n                                            You can provide answers on a wide variety of topics, including health, work-life balance, personal development, hobbies, relationships, and more.\n                                            You are expected to provide helpful advice, factual information, and when needed, suggest practical solutions.\n                                            Keep your answers concise, thoughtful, and approachable, while making sure to address the user's needs thoroughly.\n                                            If you don't know the answer or need more clarification, kindly ask for additional information or suggest credible resources.\n\n                                        \"\"\"","importedQueryInputs":{},"playgroundQueryUuid":"","requireConfirmation":false,"runWhenModelUpdates":false,"textExtractorLabels":[],"workflowRunBodyType":"raw","fileUseDynamicSource":false,"imageExtractorLabels":[],"notificationDuration":4.5,"queryDisabledMessage":"","requestSentTimestamp":null,"resourceNameOverride":"","resourceTypeOverride":null,"textClassifierLabels":[],"imageClassifierLabels":[],"importedQueryDefaults":{},"playgroundQuerySaveId":"latest","runWhenPageLoadsDelay":"","enableErrorTransformer":false,"offlineUserQueryInputs":"","queryFailureConditions":"","defaultModelInitialized":true,"vectorDynamicNamespaces":"","queryRunOnSelectorUpdate":false,"updateSetValueDynamically":false,"vectorNamespaceIdsFilters":[],"lastReceivedFromResourceAt":null,"textExtractorDynamicLabels":"","vectorSemanticSearchString":"","imageExtractorDynamicLabels":"","textClassifierDynamicLabels":"","imageClassifierDynamicLabels":"","overrideOrgCacheForUserCache":false,"vectorActionDynamicNamespace":"","showLatestVersionUpdatedWarning":false,"textExtractorDynamicModeEnabled":false,"imageExtractorDynamicModeEnabled":false,"textClassifierDynamicModeEnabled":false,"imageClassifierDynamicModeEnabled":false,"vectorNamespacesDynamicModeEnabled":false,"showUpdateSetValueDynamicallyToggle":true,"vectorCreateAndFetchDynamicModeEnabled":false,"vectorActionNamespaceDynamicModeEnabled":false},"container":"","createdAt":"2024-09-16T11:56:55.297Z","namespace":null,"position2":null,"updatedAt":"2024-09-17T10:56:27.865Z","resourceName":"retool_ai","mobilePosition2":null,"mobileAppPosition":null,"resourceDisplayName":null},"button1":{"id":"button1","type":"widget","uuid":"a1195c58-56c7-4749-8170-568e9e6dc8f8","style":{},"folder":"","screen":null,"subtype":"ButtonWidget2","tabIndex":null,"template":{"text":"Send","events":[{"type":"script","event":"click","method":"run","params":{"src":"// Step 1: Capture the input value from the textbox (the message)\nconst inputValue = textInput1.value;\n\n// Step 2: Set the messenger, which could be 'bot' or 'user'\nconst messenger = \"user\";  // Adjust this as needed, depending on who is sending\n\n// Step 3: Get the current date and time\nconst currentDate = new Date();\nconst messageDate = currentDate.toISOString().split('T')[0];  // Format date as YYYY-MM-DD\nconst messageTime = currentDate.toTimeString().split(' ')[0]; // Format time as HH:MM:SS\n\n// Function to generate a chatId based on the day and the first message\nfunction generateChatId(firstMessage) {\n  if (!firstMessage || typeof firstMessage !== \"string\") {\n    return \"InvalidMessage\";  // Fallback chatId if something goes wrong\n  }\n\n  const currentDate = new Date();\n  const formattedDate = currentDate.toISOString().split('T')[0].replace(/-/g, ''); // 'YYYYMMDD'\n  const messageSnippet = firstMessage.replace(/\\s+/g, '').substring(0, 10); // Remove spaces and take first 10 chars\n  const chatId = `${formattedDate}-${messageSnippet}`;\n  return chatId;\n}\n\n// Step 4: Check if the user selected 'New Chat' or an existing chat from the dropdown\nconst selectedChatId = listbox1.value; // Assuming this dropdown contains \"New Chat\" or chat IDs\nlet finalChatId;\n\n// Step 5: If 'New Chat' is selected, generate a new chatId\nif (selectedChatId === \"New Chat\") {\n  finalChatId = generateChatId(inputValue);  // Generate new chatId using the first message\n} else {\n  finalChatId = selectedChatId;  // Use the selected existing chatId\n}\n\n// Step 6: First, trigger the AI query (query6) to get the AI's response\nquery6.trigger({\n  onSuccess: function() {\n    // Step 7: Get the AI response from query6.data\n    const aiMessage = query6.data;  // Get the AI response directly from query6.data\n\n    // Ensure the AI response is not null or empty\n    if (aiMessage && aiMessage.trim() !== \"\") {\n      // Step 8: Save the user message in the database using query3\n      query3.trigger({\n        additionalScope: {\n          chatId: finalChatId,          // Use the generated or selected chatId\n          valueToInsert: inputValue,    // Message content from the textbox\n          valueMessenger: messenger,    // Either 'user' or 'bot'\n          valueDate: messageDate,       // Current date\n          valueTime: messageTime        // Current time\n        },\n        onSuccess: function(data) {\n          utils.showNotification({\n            title: \"Message saved!\",\n            description: \"User's message has been successfully saved to the database.\",\n            type: \"success\"\n          });\n\n          // Step 9: Save the AI's message as a new entry in the database\n          query3.trigger({\n            additionalScope: {\n              chatId: finalChatId,          // Use the same chatId\n              valueToInsert: aiMessage,     // AI response message\n              valueMessenger: \"bot\",        // Mark it as coming from the \"bot\"\n              valueDate: messageDate,       // Current date\n              valueTime: messageTime        // Current time\n            },\n            onSuccess: function(data) {\n              utils.showNotification({\n                title: \"AI Response Saved!\",\n                description: \"The AI response has been successfully saved to the database.\",\n                type: \"success\"\n              });\n            },\n            onFailure: function(error) {\n              utils.showNotification({\n                title: \"Error\",\n                description: \"Failed to save the AI response.\",\n                type: \"error\"\n              });\n            }\n          });\n        },\n        onFailure: function(error) {\n          utils.showNotification({\n            title: \"Error\",\n            description: \"Failed to save the user message.\",\n            type: \"error\"\n          });\n        }\n      });\n    } else {\n      // If AI didn't return a valid response\n      utils.showNotification({\n        title: \"No Response from AI\",\n        description: \"The AI did not return a valid response.\",\n        type: \"warning\"\n      });\n    }\n  },\n  onFailure: function(error) {\n    utils.showNotification({\n      title: \"Error\",\n      description: \"Failed to trigger AI query.\",\n      type: \"error\"\n    });\n  }\n});\n"},"waitMs":"0","pluginId":"","targetId":null,"waitType":"debounce"},{"type":"datasource","event":"click","method":"trigger","params":{},"waitMs":"0","pluginId":"query1","targetId":null,"waitType":"debounce"}],"hidden":false,"margin":"4px 8px","submit":false,"loading":false,"disabled":false,"ariaLabel":"","clickable":false,"iconAfter":"","heightType":"fixed","iconBefore":"","tooltipText":"","showInEditor":false,"styleVariant":"solid","loaderPosition":"auto","submitTargetId":null,"horizontalAlign":"stretch","maintainSpaceWhenHidden":false},"container":"","createdAt":"2024-09-16T05:21:06.583Z","namespace":null,"position2":{"col":7,"row":23.599999999999998,"type":"grid","width":1,"height":1.6,"tabNum":0,"rowGroup":"body","container":"","subcontainer":"","stackPosition":null},"updatedAt":"2024-09-18T08:12:55.210Z","resourceName":null,"mobilePosition2":null,"mobileAppPosition":null,"resourceDisplayName":null},"listbox1":{"id":"listbox1","type":"widget","uuid":"18f5d936-c3a0-4d2d-ba80-ed030f408488","style":{},"folder":"","screen":null,"subtype":"ListboxWidget","tabIndex":null,"template":{"_ids":[],"data":"{{ query5.data }}","label":"Chat History","style":{"background":"rgb(236, 229, 221)"},"value":"{{ self.values[0] }}","events":{},"hidden":false,"labels":[],"margin":"4px 8px","values":"{{ item.chat_id }}","_labels":[],"_values":[],"invalid":false,"disabled":false,"itemMode":"dynamic","required":false,"_validate":false,"labelWrap":false,"labelAlign":"left","labelWidth":"33","searchMode":"fuzzy","searchTerm":"","formDataKey":"{{ self.id }}","iconByIndex":[],"tooltipText":"","_iconByIndex":[],"colorByIndex":[],"emptyMessage":"No options","imageByIndex":[],"labelCaption":"","selectedItem":null,"showInEditor":false,"_colorByIndex":[],"_imageByIndex":[],"allowDeselect":false,"hiddenByIndex":[],"labelPosition":"top","selectedIndex":null,"selectedLabel":"","_hiddenByIndex":[],"captionByIndex":[],"disabledValues":[],"labelWidthUnit":"%","tooltipByIndex":[],"_captionByIndex":[],"_tooltipByIndex":[],"disabledByIndex":[],"_disabledByIndex":[],"customValidation":"","deprecatedLabels":[],"itemAdornmentSize":"auto","validationMessage":"","itemAdornmentShape":"circle","automaticItemColors":false,"fallbackTextByIndex":[],"_fallbackTextByIndex":[],"hideValidationMessage":false,"showSelectionIndicator":true,"_hasMigratedNestedItems":true,"maintainSpaceWhenHidden":false},"container":"","createdAt":"2024-09-17T12:06:18.136Z","namespace":null,"position2":{"col":0,"row":11.000000000000002,"type":"grid","width":2,"height":12.599999999999998,"tabNum":0,"rowGroup":"body","container":"","subcontainer":"","stackPosition":null},"updatedAt":"2024-09-17T12:25:48.310Z","resourceName":null,"mobilePosition2":null,"mobileAppPosition":null,"resourceDisplayName":null},"textInput1":{"id":"textInput1","type":"widget","uuid":"e2dd41cd-7649-4c34-9d8c-cd9a379ca041","style":{},"folder":"","screen":null,"subtype":"TextInputWidget2","tabIndex":null,"template":{"label":"Enter your massage here","style":{},"value":"","events":[{"type":"script","event":"submit","method":"run","params":{"src":"utils.setValue('inputValue', textInput1.value);\nconst storedValue = utils.getValue('inputValue');\n"},"waitMs":"0","pluginId":"","targetId":null,"waitType":"debounce"},{"type":"datasource","event":"submit","method":"trigger","params":{},"waitMs":"0","pluginId":"query1","targetId":null,"waitType":"debounce"}],"hidden":false,"margin":"4px 8px","invalid":false,"loading":false,"pattern":"","autoFill":"","disabled":false,"readOnly":false,"required":false,"_validate":false,"iconAfter":"","labelWrap":false,"maxLength":null,"minLength":null,"showClear":false,"textAfter":"","iconBefore":"","labelAlign":"left","labelWidth":"33","spellCheck":false,"textBefore":"","formDataKey":"{{ self.id }}","patternType":"","placeholder":"","tooltipText":"","autoComplete":false,"inputTooltip":"","labelCaption":"","showInEditor":false,"labelPosition":"top","autoCapitalize":"none","labelWidthUnit":"%","customValidation":"","enforceMaxLength":false,"validationMessage":"","showCharacterCount":false,"hideValidationMessage":false,"maintainSpaceWhenHidden":false},"container":"","createdAt":"2024-09-15T10:19:04.721Z","namespace":null,"position2":{"col":2,"row":23.599999999999998,"type":"grid","width":5,"height":0.2,"tabNum":0,"rowGroup":"body","container":"","subcontainer":"","stackPosition":null},"updatedAt":"2024-09-18T08:13:24.212Z","resourceName":null,"mobilePosition2":null,"mobileAppPosition":null,"resourceDisplayName":null},"customComponent2":{"id":"customComponent2","type":"widget","uuid":"ff443d2b-5684-4e6a-8268-30e086cf5200","style":{},"folder":"","screen":null,"subtype":"CustomComponentWidget","tabIndex":null,"template":{"model":"{\n  \"client\": \"{{ listbox1.value }}\",  // The current user or client selected from a dropdown\n  \"timezone\": \"UTC\",  // Set dynamically if needed, or keep it fixed\n  \"data\": {{ query4.data }},  // The messages data fetched from query4\n  \"queryToLoadMessages\": \"query4\"  // The query that loads messages\n}\n","allowForms":false,"heightType":"fixed","iframeCode":"<!-- Load React and ReactDOM libraries -->\n<script src=\"https://cdn.tryretool.com/js/react.production.min.js\" crossorigin></script>\n<script src=\"https://cdn.tryretool.com/js/react-dom.production.min.js\" crossorigin></script>\n\n<!-- Load Moment.js and Moment Timezone libraries -->\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.34/moment-timezone-with-data.min.js\"></script>\n\n<!-- Style for the component -->\n<style>\n  body {\n    margin: 0;\n    padding: 10px;\n    font-family: 'Overpass', sans-serif;\n  }\n  \n  .card-content {\n    min-height: 100%;\n    background: #ece5dd;\n  }\n\n  .msg-container {\n    width: 90%;\n    margin: 10px 0;\n    white-space: pre-line;\n    overflow-wrap: break-word;\n  }\n\n  .msg-container-right {\n    margin-left: 10%;\n  }\n\n  /* User message */\n  .msg-right {\n    background: #f1f0f0; /* User message background */\n    border-radius: 15px 15px 15px 4px;\n    padding: 10px;\n    color: #333;\n  }\n\n  /* Bot message */\n  .msg-left {\n    background: #d1e7ff; /* Bot message background */\n    border-radius: 15px 15px 4px 15px;\n    padding: 10px;\n    color: #000;\n  }\n\n  .message-data-time {\n    color: #888888;\n    padding-left: 6px;\n    font-size: 12px;\n  }\n</style>\n\n<!-- Custom component -->\n<div id=\"react\"></div>\n\n<script type=\"text/babel\">\n  class MyCustomComponent extends React.Component {\n    constructor(props) {\n      super(props);\n    }\n\n    componentDidMount() {\n      // Set up polling to check for new data every 5 seconds\n      this.intervalId = setInterval(() => {\n        this.props.triggerQuery(this.props.model.queryToLoadMessages); // Trigger query to check for new messages\n      }, 5000);\n    }\n\n    componentWillUnmount() {\n      // Clear the polling interval when the component unmounts\n      clearInterval(this.intervalId);\n    }\n\n    render() {\n      const { model } = this.props;\n\n      // Check if the selection is \"New Chat\"\n      if (model.client === \"New Chat\") {\n        return (\n          <div className=\"card-content\">\n            <p>Hi! I'm your assistant, here to help ARC employees with any questions. Whether it's about petroleum research or personal development, feel free to ask!</p>\n          </div>\n        );\n      }\n\n      const messages = model.data || { message: [], messenger: [], message_date: [], message_time: [] };\n\n      if (!messages || !messages.message || messages.message.length === 0) {\n        return <p>No messages found for this chat.</p>;\n      }\n\n      return (\n        <div className=\"card-content\">\n          {messages.message.map((_, index) => {\n            const time = moment(`${messages.message_date[index]} ${messages.message_time[index]}`).format(\"ddd, MMM D - hh:mm A\");\n\n            // Check if it's a user or bot message and apply the correct class\n            const isUser = messages.messenger[index] === \"user\";\n\n            return (\n              <div className={isUser ? \"msg-container-right msg-container\" : \"msg-container\"} key={index}>\n                <span className=\"message-data-time\">\n                  {time} {isUser ? \"✔\" : \"\"} {\"#\" + index}\n                </span>\n                {messages.message[index] && (\n                  <div className={isUser ? \"msg-right\" : \"msg-left\"}>\n                    {messages.message[index]}\n                  </div>\n                )}\n              </div>\n            );\n          })}\n          <div id=\"scrollToBottom\"></div>\n        </div>\n      );\n    }\n  }\n\n  const ConnectedComponent = Retool.connectReactComponent(MyCustomComponent);\n  ReactDOM.render(<ConnectedComponent />, document.getElementById(\"react\"));\n</script>\n","allowCamera":false,"allowModals":false,"allowPopups":true,"allowPayment":false,"allowDownloads":false,"allowFullscreen":true,"allowMicrophone":false,"allowSameOrigin":false,"allowGeolocation":false,"allowTopNavigation":false,"renderInQuirksMode":false,"allowPopupsToEscapeSandbox":false},"container":"","createdAt":"2024-09-17T09:55:56.487Z","namespace":null,"position2":{"col":2,"row":11.4,"type":"grid","width":6,"height":12.2,"tabNum":0,"rowGroup":"body","container":"","subcontainer":"","stackPosition":null},"updatedAt":"2024-09-18T07:50:46.484Z","resourceName":null,"mobilePosition2":null,"mobileAppPosition":null,"resourceDisplayName":null}},"version":"3.123.0","appStyles":"","createdAt":null,"isFormApp":false,"shortlink":null,"appTesting":null,"appThemeId":null,"isFetching":false,"rootScreen":null,"appMaxWidth":"100%","isMobileApp":false,"appThemeName":null,"savePlatform":"web","testEntities":[],"appThemeModeId":null,"isGlobalWidget":false,"customShortcuts":[],"formAppSettings":{"customRedirectUrl":""},"pageCodeFolders":{},"mobileAppSettings":{"displaySetting":{"tabletMode":false,"landscapeMode":false},"mobileOfflineModeEnabled":false,"mobileOfflineModeDelaySync":false,"mobileOfflineModeBannerMode":"default"},"customDocumentTitle":"","mobileOfflineAssets":[],"preloadedAppJSLinks":[],"experimentalFeatures":{"disableMultiplayerEditing":false,"multiplayerEditingEnabled":false,"sourceControlTemplateDehydration":false},"markdownLinkBehavior":"auto","multiScreenMobileApp":false,"notificationsSettings":{"globalToastPosition":"bottomRight","globalQueryToastDuration":4.5,"globalQueryShowFailureToast":true,"globalQueryShowSuccessToast":false},"queryStatusVisibility":false,"instrumentationEnabled":false,"pageLoadValueOverrides":[],"preloadedAppJavaScript":null,"urlFragmentDefinitions":[],"responsiveLayoutDisabled":false,"inAppRetoolPillAppearance":"NO_OVERRIDE","loadingIndicatorsDisabled":false,"customComponentCollections":[],"customDocumentTitleEnabled":false,"experimentalDataTabEnabled":false,"internationalizationSettings":{"internationalizationFiles":[],"internationalizationEnabled":false}}}}],"gitSha":null,"checksum":null,"createdAt":"2024-12-03T19:34:35.949Z","updatedAt":"2024-12-03T19:34:35.949Z","pageId":3467840,"userId":1325929},"modules":{}}